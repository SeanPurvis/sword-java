package edu.usm.sosw.sword.db;

import java.util.List;

import org.skife.jdbi.v2.sqlobject.Bind;
import org.skife.jdbi.v2.sqlobject.BindBean;
import org.skife.jdbi.v2.sqlobject.GetGeneratedKeys;
import org.skife.jdbi.v2.sqlobject.SqlQuery;
import org.skife.jdbi.v2.sqlobject.SqlUpdate;
import org.skife.jdbi.v2.sqlobject.customizers.RegisterMapper;

import edu.usm.sosw.sword.api.CaseNote;
import edu.usm.sosw.sword.mappers.CaseNoteMapper;

/** 
 * This interface exists to provide proper access to the <code>casenotes</code> table.
 * SQL is written in the <code>SqlUpdate and SqlQuery</code> annotations above every function 
 * and then rewritten and executed by JDBI.
 * 
 * The <code>CaseNoteDAO</code> interface is used by the <code>CaseNoteResource</code> class in the <code>resources</code> package.
 * 
 * <code>RegisterMapper</code> annotation allows JDBI to bind the <code>CaseNoteMapper</code> class to this interface.
 * Without the <code>RegisterMapper</code> annotation, the SQL query results would not bind properly
 * to the </code>CaseNote Object.</code>
 * 
 * @author Sean T. Purvis
 * @version 0.0.1 
 * @see CaseNote 
 * @see CaseNoteMapper
 * @see CaseNoteResource
 */
@RegisterMapper(CaseNoteMapper.class)
public interface CaseNoteDAO {
	@SqlUpdate("CREATE TABLE IF NOT EXISTS `casenotes` (\n" + 
			"  `id` int(8) NOT NULL AUTO_INCREMENT,\n" + 
			"  `youthid` int(8) NOT NULL,\n" + 
			"  `caseid` int(8) NOT NULL,\n" + 
			"  `note_id` int(8) DEFAULT 0,\n" + 
			"  `note` varchar(1000) DEFAULT ' ',\n" + 
			"  `input_date` date NOT NULL,\n" + 
			"  `input_user` varchar(50) NOT NULL,\n" + 
			"  PRIMARY KEY (`id`)\n" + 
			") ENGINE=InnoDB AUTO_INCREMENT=4222 DEFAULT CHARSET=latin1;\n" + 
			"")
	void createCaseNoteTable();
	
	@SqlQuery("select * from casenotes")
	List<CaseNote> getAll();
	
	@SqlQuery("select * from casenotes where id = :id")
	CaseNote findById(@Bind("id") int id);
	
	@SqlQuery("select * from casenotes where youthid = :youthid")
	CaseNote findByYouthId(@Bind("youthid") int youthid);
	
	@SqlQuery("select * from casenotes where caseid = :caseid")
	CaseNote findByCaseId(@Bind("caseid") int caseid);
	
	@SqlQuery("select * from casenotes where id = :id")
	CaseNote findByNoteId(@Bind("note_id") int note_id);
	
	@SqlUpdate("delete from casenotes where id = :id")
	void deleteById(@Bind("id") int id);
	
	@SqlUpdate("UPDATE `sword-test`.`casenotes`\n" + 
			"SET\n" + 
			"`id` = <{id: }>,\n" + 
			"`youthid` = <{youthid: }>,\n" + 
			"`caseid` = <{caseid: }>,\n" + 
			"`note_id` = <{note_id: 0}>,\n" + 
			"`note` = <{note:  }>,\n" + 
			"`input_date` = <{input_date: }>,\n" + 
			"`input_user` = <{input_user: }>\n" + 
			"WHERE `id` = <{expr}>;\n" + 
			"")
	void update(@BindBean CaseNote CaseNote);
	
	@GetGeneratedKeys // Allows us to return the autogenerated id to our client.
	@SqlUpdate("INSERT INTO `sword-test`.`casenotes`\n" + 
			"(`id`,\n" + 
			"`youthid`,\n" + 
			"`caseid`,\n" + 
			"`note_id`,\n" + 
			"`note`,\n" + 
			"`input_date`,\n" + 
			"`input_user`)\n" + 
			"VALUES\n" + 
			"(<{id: }>,\n" + 
			"<{youthid: }>,\n" + 
			"<{caseid: }>,\n" + 
			"<{note_id: 0}>,\n" + 
			"<{note:  }>,\n" + 
			"<{input_date: }>,\n" + 
			"<{input_user: }>);\n" + 
			"")
	int insert(@BindBean CaseNote CaseNote);

	void close();
}
